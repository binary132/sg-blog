<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SynapseGarden Weblog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on SynapseGarden Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Bodie Solomon</copyright>
    <lastBuildDate>Wed, 24 Jun 2015 10:34:50 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RVM on Gentoo</title>
      <link>http://localhost:1313/post/gentoo-rvm/</link>
      <pubDate>Wed, 24 Jun 2015 10:34:50 -0400</pubDate>
      
      <guid>http://localhost:1313/post/gentoo-rvm/</guid>
      <description>

&lt;p&gt;&lt;code&gt;RVM is bad and Gentoo is good&lt;/code&gt;, and other blasphemies.&lt;/p&gt;

&lt;h2 id=&#34;rails:9f48e36a41ea6f9357ec1699faa1616e&#34;&gt;Rails&lt;/h2&gt;

&lt;p&gt;Today I decided to expand my repertoire a bit with Rails.  I&amp;rsquo;m mostly focused
on backend nuts and bolts, but I need a full-stack framework under my belt,
and Ruby on Rails is arguably the best option due to its simplicity and ease
to get off the ground.  It&amp;rsquo;s obviously very popular &amp;ndash; I&amp;rsquo;ve had lots of
people insist I explore it &amp;ndash; so I&amp;rsquo;m finally getting around to it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always avoided fullstack work in favor of API + frontend.  What can I
say?  I&amp;rsquo;m a control freak.  I adore simple, explicit interfaces and precise
expectations.  The last time I explored Rails, it seemed like a huge,
impenetrable monstrosity.  But it continues to be one of the most well-known
and useful tools in the free world, so learn it I shall.&lt;/p&gt;

&lt;h2 id=&#34;gentoo:9f48e36a41ea6f9357ec1699faa1616e&#34;&gt;Gentoo&lt;/h2&gt;

&lt;p&gt;However, I discovered that when I chose to use &lt;a href=&#34;http://img1.wikia.nocookie.net/__cb20140603003134/pokemon/images/7/7e/Moon_Stone_anime.png&#34;&gt;moon stone&lt;/a&gt;
on my workstation, I overlooked a few details of its evolution.
You see, Gentoo likes to manage packages GENTOO&amp;rsquo;S way.  Mixing package
managers usually isn&amp;rsquo;t an issue on other systems &amp;ndash; most people know better
than to &lt;a href=&#34;https://help.ubuntu.com/lts/serverguide/ruby-on-rails.html&#34;&gt;use &lt;code&gt;apt-get&lt;/code&gt; to install Rails on an LTS distribution&lt;/a&gt; &amp;ndash;
but Gentoo is highly opinionated about package and dependence versioning, so
most Gentoo users would &lt;a href=&#34;https://wiki.gentoo.org/wiki/Project:Ruby&#34;&gt;use &amp;lsquo;eselect&amp;rsquo; to choose their version of Ruby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I went to &lt;code&gt;gem install rails&lt;/code&gt;, everything seemed fine.  However, &lt;code&gt;rails&lt;/code&gt;
was not found by my shell.  It turns out &lt;code&gt;rvm&lt;/code&gt; and `&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rebirth of Mindfork</title>
      <link>http://localhost:1313/post/mindfork/</link>
      <pubDate>Tue, 10 Feb 2015 20:47:50 -0500</pubDate>
      
      <guid>http://localhost:1313/post/mindfork/</guid>
      <description>

&lt;p&gt;Today is the day I renew my work on &lt;a href=&#34;https://github.com/mindfork&#34;&gt;Mindfork&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;why:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Why?&lt;/h1&gt;

&lt;p&gt;Mindfork began as an idea for a calendar or todo app which keeps track of performance or other metrics, offering the user guidance toward goals.  It quickly evolved into much more, but was never completed beyond a few quick sketches.&lt;/p&gt;

&lt;p&gt;Mindfork is meant not just to help people work together, but to help us learn together.  In university, I never learned about the &amp;ldquo;Real World&amp;rdquo; ecosystem of tools and ideas until I pursued that knowledge for myself, and there&amp;rsquo;s no roadmap.  At all.  A huge goal of Mindfork is to bring people with different knowledge together to create a community where what needs to be learned can be learned.&lt;/p&gt;

&lt;p&gt;Today, the idea of a resume-as-a-service reminded me of the user skills tracker I imagined as a core feature of Mindfork.&lt;/p&gt;

&lt;h2 id=&#34;toxic-culture:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Toxic Culture&lt;/h2&gt;

&lt;p&gt;Coming out of school, I quickly realized that the Real World of software engineers isn&amp;rsquo;t a curious place full of learning; it is &lt;em&gt;brutally cutthroat&lt;/em&gt;.  The culture in some communities is completely toxic, save for a very few people.  Many engineers and sysadmins seem to exist solely for the purpose of aggrandizing themselves at the expense of others, belittling and mocking the less talented or knowledgeable, and creating cults around arcane and extreme code cultures.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;culture du jour&lt;/em&gt; is a moving target; one can never strive to become excellent in it without being seen as a hapless follower, hopelessly behind the times as the Gnostic wizards of code pursue ever more obscure, powerful solutions to problems that may or may not ever exist.  And of course backlash cultures then spring into existence, equally bigoted and ignorant with an equally pompous attitude towards the hopelessly un-hip.&lt;/p&gt;

&lt;h2 id=&#34;ignorance:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Ignorance&lt;/h2&gt;

&lt;p&gt;There seem to be thousands of such systems and tools, and communities revolving around them.  In today&amp;rsquo;s industry, finding a job often seems to be less about being a good engineer, and more about being good at guessing what trends are trendiest.  Most of us in the software world don&amp;rsquo;t even need me to give a few examples; Big Data is a catchword which seems to constantly roll out of the mouths of the ignorant, along with other phrases, such as &amp;ldquo;webscale&amp;rdquo;, &amp;ldquo;enterprise&amp;rdquo;, and so on.  (Am I, too, guilty of mockery and elitism?  Perhaps a bit.)&lt;/p&gt;

&lt;h1 id=&#34;the-solution:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;I began working at DigitalOcean in June of 2013.  I was incredibly excited.  This was it.  I was getting involved in the hot stuff.  I felt like I&amp;rsquo;d won the lottery.  I was full of fire and love for the product, and for life; my daughter had been born just a week or two before, I&amp;rsquo;d just moved across the country, and I was full of the dream that I could achieve whatever I set my heart and mind to.  So I did.  I threw myself head-on into learning everything I could about distributed systems and new ideas about concurrent programming, with tools like Go, Erlang (which was experiencing a minor resurge in popularity), and Scala.&lt;/p&gt;

&lt;p&gt;I had access to free cloud hosting, and I was liberal with trial credits.  I was highly involved with the community.  I&amp;rsquo;ve always been a person who loves teaching and learning, and I was available to communicate with people who came to me with questions.  And I was learning, too.&lt;/p&gt;

&lt;h2 id=&#34;community-power:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Community Power&lt;/h2&gt;

&lt;p&gt;I saw the vast potential of the community organized around learning together.  I saw that with huge numbers of people, we could accomplish nearly anything imaginable.  It was just a question of how; humans aren&amp;rsquo;t fast enough or smart enough to manage projects at that scale unless it&amp;rsquo;s their full-time job, and such jobs don&amp;rsquo;t come easily with free software.&lt;/p&gt;

&lt;p&gt;Now, with cheap clusters at our fingertips in the cloud, we had tools powerful enough to manage thousands of people, working together in real time.  We had tools we could all work on, together, using DCVS like Git.  And we had tools which could really perform, in concurrency-oriented runtimes like Go and Nodejs, and datastores we could put enormous amounts of data in.&lt;/p&gt;

&lt;p&gt;We just needed the software to do it.  That idea was born as Mindfork.&lt;/p&gt;

&lt;p&gt;It was a very &lt;em&gt;webscale&lt;/em&gt; moment in the &lt;em&gt;big data cloud&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;origins-and-progress:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Origins and Progress&lt;/h1&gt;

&lt;p&gt;Today, I started on the first working agent, a simple login service called &lt;a href=&#34;https://github.com/mindfork/gatekeeper&#34;&gt;Gatekeeper&lt;/a&gt;.  Together with &lt;a href=&#34;http://bluevisual.tv&#34;&gt;Kevin Weber&lt;/a&gt;, I&amp;rsquo;m building a web dashboard framework, &lt;a href=&#34;https://github.com/synapse-garden/dash&#34;&gt;Dash&lt;/a&gt;, in tandem with Mindfork, so that they can grow and evolve together, giving users easy access to the early power of Mindfork.  Dash is the software which powers &lt;a href=&#34;http://synapsegarden.net&#34;&gt;synapsegarden.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The purpose of Mindfork is to create a framework for automated community collaboration, centered around free software.  Mindfork is &lt;em&gt;free&lt;/em&gt; software (see &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;here&lt;/a&gt; for a meaningful definition of &lt;em&gt;free&lt;/em&gt;) which intelligently manages data.  Anyone can run it and use it.  It is at heart all about free exchange of ideas, to create a new ecosystem where people collaborate to gain power, instead of competing.&lt;/p&gt;

&lt;p&gt;SynapseGarden is the learning, growing, collaborative community which will be built around Mindfork.&lt;/p&gt;

&lt;h1 id=&#34;mindfork-basics:2a92379f66ba7fb492102b896caa6b2a&#34;&gt;Mindfork Basics&lt;/h1&gt;

&lt;p&gt;A Mindfork cluster is built out of simple &amp;ldquo;Agents&amp;rdquo; which each have a single responsibility, and communicate with each other over the network to find out what they need to know.  Agents can be forked (copied) and built upon, and new improved Agents given back to the ecosystem; clusters of Agents can create a holistic view of data, giving the owner and users insight and projections.&lt;/p&gt;

&lt;p&gt;The purpose is to create an analytic suite for communities of humans.  How do people work best?  Maybe some people work best in the morning, and some work best at night.  Maybe some people work best with others, while others work best alone.  Mindfork helps us ask and answer these kinds of questions.&lt;/p&gt;

&lt;p&gt;For now, the only question it will answer is, &amp;ldquo;are you logged in?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;More to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Juju</title>
      <link>http://localhost:1313/post/using-juju/</link>
      <pubDate>Sun, 08 Feb 2015 15:13:51 -0500</pubDate>
      
      <guid>http://localhost:1313/post/using-juju/</guid>
      <description>

&lt;p&gt;Last night, I migrated Michelle&amp;rsquo;s Wordpress blog to a new Juju cluster on my DigitalOcean cloud.&lt;/p&gt;

&lt;h1 id=&#34;it-just-works:17cc4a5aef794ff66650e445e2af39c8&#34;&gt;It just works!&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/TKrc7EM.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/TKrc7EM.png&#34; width=&#34;800px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have time for a detailed post, so I&amp;rsquo;ll keep it brief.  I&amp;rsquo;m running the latest upstream of Juju, using &lt;a href=&#34;https://github.com/kapilt/juju-digitalocean&#34;&gt;kapilt/juju-digitalocean&lt;/a&gt;.  It was smooth sailing, mostly, and that &amp;ldquo;It just works!&amp;rdquo; feeling was great.  Linking up Wordpress and MySQL on the same VM, under two services, was clean and easy.&lt;/p&gt;

&lt;p&gt;But, there&amp;rsquo;s that &lt;em&gt;&amp;ldquo;mostly&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;mostly:17cc4a5aef794ff66650e445e2af39c8&#34;&gt;&amp;hellip;mostly&lt;/h1&gt;

&lt;p&gt;I ran into a bug where adding a memcached&amp;lt;-&amp;gt;Wordpress relation wasn&amp;rsquo;t installing ffpc on the Wordpress service correctly.  I need to do some more research.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static Sites with Hugo</title>
      <link>http://localhost:1313/post/ssg-hugo/</link>
      <pubDate>Sun, 08 Feb 2015 04:27:00 -0500</pubDate>
      
      <guid>http://localhost:1313/post/ssg-hugo/</guid>
      <description>

&lt;p&gt;Welcome to the new SynapseGarden weblog, proudly hosted on &lt;a href=&#34;https://github.com/synapse-garden/blog&#34;&gt;Github Pages&lt;/a&gt; and built with &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last night, I migrated Michelle&amp;rsquo;s Wordpress site to a VM on my new &lt;a href=&#34;http://juju.ubuntu.com&#34;&gt;Juju&lt;/a&gt; cluster.  My experience is &lt;a href=&#34;../using-juju/&#34;&gt;here&lt;/a&gt;.  I&amp;rsquo;m excited to migrate my existing instances and content into Juju, and to start using it to manage experiments.&lt;/p&gt;

&lt;p&gt;On a whim, I began hunting for a blog server written in Go, but I realized quickly that it would be foolish not to use static page generation, hosted on Github, instead.  My first (re)-discovery was Hugo, and I&amp;rsquo;ve decided to go with it.&lt;/p&gt;

&lt;p&gt;Hugo is lovely, but I hesitated to choose it.  Go is a tight, simple, fast, and &lt;em&gt;compiled&lt;/em&gt; language.  To put it another way, it doesn&amp;rsquo;t support dynamic code hotloading; it doesn&amp;rsquo;t support dynamic library loading; it doesn&amp;rsquo;t support a plugin architecture.  I chose Hugo not because of its great flexibility, but because it does most of what I could need for this project.&lt;/p&gt;

&lt;p&gt;But&amp;hellip; it got me thinking.&lt;/p&gt;

&lt;h2 id=&#34;the-go-way:32ab7241d48fcc174c877413a917f8cf&#34;&gt;The Go Way&lt;/h2&gt;

&lt;p&gt;What would be the Go Way to achieve the same functionality offered easily by dynamic languages?  A DSL extensible by a core set of simple transforms?  This idea quickly evolved into simple interpreted language in my mind.  Nope.  How about a pipeline linked over RPC?  Okay, maybe.  Interfaces and base types could be defined in a package to let users &lt;strong&gt;easily&lt;/strong&gt; define nodes.&lt;/p&gt;

&lt;p&gt;I started chatting with the guys at Freenode &lt;code&gt;#go-nuts&lt;/code&gt; (which is a sure-fire way to start a &lt;del&gt;fight&lt;/del&gt; &lt;em&gt;well-reasoned discussion&lt;/em&gt;.)  To my surprise, the first response wasn&amp;rsquo;t about Go.  The first suggestion was &lt;a href=&#34;http://jaspervdj.be/hakyll&#34;&gt;Hakyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create sites in Hakyll, the user writes a simple program importing and using Hakyll&amp;rsquo;s tools, and Hakyll makes the site based on the user&amp;rsquo;s directives.  That totally inverted my thinking.  I won&amp;rsquo;t deny that implementing such a package in Go could result in a very ugly UX.&lt;/p&gt;

&lt;h2 id=&#34;and-what-s-wrong-with-it:32ab7241d48fcc174c877413a917f8cf&#34;&gt;and what&amp;rsquo;s wrong with it&lt;/h2&gt;

&lt;p&gt;If there&amp;rsquo;s one thing I dislike about Go, it&amp;rsquo;s ironically one of its greatest strengths: its syntax.  Normally, I&amp;rsquo;m not a nitpicker about syntax.  But Go lacks a great deal of the expressiveness I&amp;rsquo;ve come to take for granted with languages like Clojure and Scala.  Even Python has list comprehensions.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still mulling over the idea of a Hakyll-like static generator.  I have a toolkit in mind for working with grammars and syntax manipulation in Go, and it could be perfect for creating a clean UX for this.  I might implement it at a later time.&lt;/p&gt;

&lt;p&gt;For now, my plate is too full.  My focus belongs on my work, and on creating the first releases of &lt;a href=&#34;https://github.com/synapse-garden/dash&#34;&gt;Dash&lt;/a&gt; and &lt;a href=&#34;https://github.com/mindfork&#34;&gt;Mindfork&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>